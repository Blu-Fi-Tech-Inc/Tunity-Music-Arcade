{"ast":null,"code":"export const addComment = async (comment, id) => {\n  try {\n    const encodedComment = comment.replaceAll(\" \", \"%20\");\n    const url = `${process.env.REACT_APP_API_BASE_URL}/tracks/${id}/comments?context=${encodedComment}`;\n    console.log(url);\n    const token = \"Bearer \" + localStorage.getItem(\"token\");\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        Authorization: token\n      }\n    });\n    await response;\n    return;\n  } catch (e) {\n    console.error(\"Error when getting tracks\", e);\n  }\n};","map":{"version":3,"names":["addComment","comment","id","encodedComment","replaceAll","url","process","env","REACT_APP_API_BASE_URL","console","log","token","localStorage","getItem","response","fetch","method","headers","Authorization","e","error"],"sources":["D:/Tunity Wallet/frontend/src/apis/track/addComment.js"],"sourcesContent":["export const addComment = async (comment, id) => {\n  try {\n    const encodedComment = comment.replaceAll(\" \", \"%20\");\n    const url = `${process.env.REACT_APP_API_BASE_URL}/tracks/${id}/comments?context=${encodedComment}`;\n    console.log(url);\n    const token = \"Bearer \" + localStorage.getItem(\"token\");\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        Authorization: token,\n      },\n    });\n    await response;\n    return;\n  } catch (e) {\n    console.error(\"Error when getting tracks\", e);\n  }\n};\n"],"mappings":"AAAA,OAAO,MAAMA,UAAU,GAAG,MAAAA,CAAOC,OAAO,EAAEC,EAAE,KAAK;EAC/C,IAAI;IACF,MAAMC,cAAc,GAAGF,OAAO,CAACG,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC;IACrD,MAAMC,GAAG,GAAI,GAAEC,OAAO,CAACC,GAAG,CAACC,sBAAuB,WAAUN,EAAG,qBAAoBC,cAAe,EAAC;IACnGM,OAAO,CAACC,GAAG,CAACL,GAAG,CAAC;IAChB,MAAMM,KAAK,GAAG,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACvD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACV,GAAG,EAAE;MAChCW,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACPC,aAAa,EAAEP;MACjB;IACF,CAAC,CAAC;IACF,MAAMG,QAAQ;IACd;EACF,CAAC,CAAC,OAAOK,CAAC,EAAE;IACVV,OAAO,CAACW,KAAK,CAAC,2BAA2B,EAAED,CAAC,CAAC;EAC/C;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}